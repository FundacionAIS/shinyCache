% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cached_fun.R
\name{cache_call}
\alias{cache_call}
\title{Execute a function or retrieve values from a cache}
\usage{
cache_call(
  fn,
  cache,
  cache_params = list(),
  non_cache_params = NULL,
  prefix = NULL,
  cache_depends = NULL,
  custom_id = NULL
)
}
\arguments{
\item{fn}{A function to call if the value is not cached}

\item{cache}{A reactiveValues object to serve as a cache storage}

\item{cache_params}{Named list of parameters to pass on to fn. These
parameters will identify the cached object.}

\item{non_cache_params}{Named list of parameters to pass on to fn
without affecting the identity of the cached item.}

\item{prefix}{A prefix to add to the hash of a cached object. Serves the
purpose of allowing users to more easily identify cached objects.}

\item{cache_depends}{Extra object that affects the identity of an object.}

\item{custom_id}{Use a custom id instead of a hash generated by
cache_params and cache_depends}
}
\description{
\code{cache_call} returns a function call or retrieves a value stored in a
  cache in order to speed up shiny apps.
}
\details{
This function identifies a value based on the parameters passed on to a
  function, a prefix and extra objects the user decides to use. This
  function uses reactiveValues to create a hash dictionary from which to
  retrieve previously executed funtions.
}
\examples{
cache <- reactiveValues()

output$table <- renderDataTable({
  cache_call(
    fn = long_computation,
    cache = cache,
    cache_params = list(arg1 = user_input),
    non_cache_params = list(data = mtcars),
    prefix = "table"
  )
})

}
